{"version":3,"sources":["components/ui/PokeNavbar.jsx","helpers/utils.js","components/pokedex/PokedexCard.jsx","components/screens/SearchScreen.jsx","hooks/useFetchSingle.js","hooks/useForm.js","components/pokedex/PokedexList.jsx","components/screens/HomeScreen.jsx","hooks/useFetch.js","routers/AppRouter.jsx","PokedexApp.jsx","index.js"],"names":["PokeNavbar","useState","isOpen","setIsOpen","Navbar","color","sticky","expand","className","to","src","alt","NavbarToggler","onClick","Collapse","navbar","Nav","activeClassName","href","target","getPokemonAbilities","pokemon","abilities","map","ability","name","getPokemonTypes","types","type","PokeCard","string","id","image","height","weight","loading","Card","CardHeader","split","s","toUpperCase","concat","slice","join","CardBody","Spinner","CardImg","width","process","t","toLowerCase","getTypeColor","Badge","key","style","background","SearchScreen","pokemonsNames","JSON","parse","localStorage","getItem","state","setState","useEffect","console","log","fetch","then","resp","json","pokes","names","results","p","setItem","stringify","prev","pokemons","catch","err","Error","url","isMounted","useRef","data","error","current","newPok","sprites","front_default","useFetchSingle","initialState","values","setValues","reset","handleInputChange","value","useForm","formValues","validateName","str","trim","onSubmit","e","preventDefault","sanitize","test","includes","autoComplete","onChange","placeholder","Alert","PokedexList","HomeScreen","currentPage","offset","perPage","forEach","newPokemon","useFetch","orderedData","sort","a","b","handlePageClick","newPage","newOffset","selected","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","activeLinkClassName","subContainerClassName","AppRouter","basename","exact","path","component","PokedexApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAgDeA,EArCI,WAAO,IAAD,EAEOC,oBAAS,GAFhB,mBAEdC,EAFc,KAENC,EAFM,KAQrB,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,SAASC,OAAO,OAAOC,OAAO,MACxC,kBAAC,IAAD,CAAMC,UAAU,sBAAsBC,GAAG,KACrC,yBAAKD,UAAU,sBAAsBE,IAAG,wCAA2CC,IAAI,aAE3F,kBAACC,EAAA,EAAD,CAAeC,QATR,WACXV,GAAWD,IAQyBM,UAAU,gBAC1C,kBAACM,EAAA,EAAD,CAAUZ,OAAQA,EAAQa,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKR,UAAU,UAAUO,QAAM,GAC3B,kBAAC,IAAD,CACIE,gBAAgB,SAChBR,GAAG,UACHD,UAAU,qBAHd,WAQJ,kBAAC,IAAD,CACIU,KAAK,4CACLC,OAAO,SACPX,UAAU,qBAEV,yBAAKA,UAAU,oBAAoBE,IAAG,0CAA6CC,IAAI,WACvF,0BAAMH,UAAU,aAAhB,c,gECzCPY,EAAsB,SAACC,GAAD,OAAaA,EAAQC,UAAUC,KAAK,qBAAGC,QAAuBC,SAEpFC,EAAkB,SAACL,GAAD,OAAaA,EAAQM,MAAMJ,KAAK,qBAAGK,KAAiBH,SCiDpEI,EA/CE,SAAC,GASP,IDTeC,ECCtBC,EAQM,EARNA,GACAC,EAOM,EAPNA,MACAP,EAMM,EANNA,KACAH,EAKM,EALNA,UACAW,EAIM,EAJNA,OACAC,EAGM,EAHNA,OACAP,EAEM,EAFNA,MACAQ,EACM,EADNA,QAMA,OACIA,EAAU,0CACV,kBAACC,EAAA,EAAD,CAAM5B,UAAU,4CACZ,kBAAC6B,EAAA,EAAD,CAAY7B,UAAU,kCDhBZ,MADIsB,ECiBsDL,GDhBrDK,EAAOQ,MAAM,KAAKf,KAAI,SAAAgB,GAAC,OAAIA,EAAE,GAAGC,cAAcC,OAAOF,EAAEG,MAAM,OAAKC,KAAK,KAAO,GCgB7F,IAA4E,0BAAMnC,UAAU,mCAAhB,KAAsDuB,IAClI,kBAACa,EAAA,EAAD,CAAUpC,UAAU,sBACd2B,EAAU,kBAACU,EAAA,EAAD,CAASxC,MAAM,YAAc,kBAACyC,EAAA,EAAD,CAAStC,UAAU,oBAAoBuC,MAAM,MAAMrC,IAP7FsB,GAAK,UAAcgB,GAAd,4BAOyGrC,IAAKc,IAClH,6BACI,wBAAIjB,UAAU,aAAd,WAAkC,8BAAQyB,EAAO,GAAf,OAClC,wBAAIzB,UAAU,aAAd,WAAmC0B,EAAO,GAA1C,OACA,yBAAK1B,UAAU,aACX,yBAAKA,UAAU,oBAAf,aAGA,yBAAKA,UAAU,qBAEPc,EAAUqB,KAAK,QAI3B,wBAAInC,UAAU,aAENmB,EAAMJ,KAAI,SAAA0B,GACN,IAAM5C,EDhCV,SAAAuB,GACxB,OAAQA,EAAKsB,eACT,IAAK,OAAe,MAAO,UAC3B,IAAK,MAAe,MAAO,UAC3B,IAAK,OAAe,MAAO,UAC3B,IAAK,MAAe,MAAO,UAC3B,IAAK,WAAe,MAAO,UAC3B,IAAK,QAAe,MAAO,UAC3B,IAAK,SAAe,MAAO,UAC3B,IAAK,OAAe,MAAO,UAC3B,IAAK,QAAe,MAAO,UAC3B,IAAK,SAAe,MAAO,UAC3B,IAAK,SAAe,MAAO,UAC3B,IAAK,SAAe,MAAO,UAC3B,IAAK,QAAe,MAAO,UAC3B,IAAK,SAAe,MAAO,UAC3B,IAAK,WAAe,MAAO,UAC3B,IAAK,QAAe,MAAO,UAC3B,IAAK,UAAe,MAAO,UAC3B,IAAK,QAAe,MAAO,UAC3B,QAAS,MAAO,WCYsBC,CAAaF,GAC3B,OAAO,kBAACG,EAAA,EAAD,CAAOC,IAAKJ,EAAGzC,UAAU,WAAW8C,MAAO,CAACC,WAAYlD,IAAU4C,W,QCqD1FO,EAxFM,WAAM,MAGGvD,mBAAS,CAC/BwD,cAAeC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GAChExC,QAAS,KALU,mBAGhByC,EAHgB,KAGTC,EAHS,KASvBC,qBAAU,WACFJ,aAAaC,QAAQ,eACrBI,QAAQC,IAAI,cACZC,MAAM,gDACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,IAAMC,EAAQD,EAAME,QAAQlD,KAAI,SAAAmD,GAAC,OAAIA,EAAEjD,QACvCmC,aAAae,QAAQ,YAAajB,KAAKkB,UAAUJ,IACjDT,GAAS,SAAAc,GAAI,MAAK,CAACpB,cAAee,EAAOM,SAAUP,EAAME,eAE5DM,OAAM,SAAAC,GAAG,OAAI,IAAIC,MAAM,4BAEjC,IArBoB,MCFG,SAACC,GAE3B,IAAMC,EAAYC,kBAAO,GAFW,EAGVnF,mBAAS,CAAEoF,KAAM,KAAMlD,SAAS,EAAMmD,MAAO,OAHnC,mBAG7BxB,EAH6B,KAGtBC,EAHsB,KAkDpC,OA7CAC,qBAAW,WACP,OAAO,WACHmB,EAAUI,SAAU,KAEzB,IAGHvB,qBAAW,WAEPD,EAAS,CAAEsB,KAAM,KAAMlD,SAAS,EAAMmD,MAAO,OAE7CnB,MAAOe,GACFd,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MAAM,SAAAiB,GAAS,IAAD,EACL/D,EAAYF,EAAoBiE,GAChC1D,EAAQD,EAAgB2D,GACxBG,EAAS,CACXzD,GAAIsD,EAAKtD,GACTC,MAAK,OAAEqD,QAAF,IAAEA,GAAF,UAAEA,EAAMI,eAAR,aAAE,EAAeC,cACtBjE,KAAM4D,EAAK5D,KACXH,UAAWA,EACXW,OAAQoD,EAAKpD,OACbC,OAAQmD,EAAKnD,OACbP,MAAOA,GAGNwD,EAAUI,SACXxB,EAAS,CACL5B,SAAS,EACTmD,MAAO,KACPD,KAAMG,OAKjBT,OAAO,WACJhB,EAAS,CACLsB,KAAM,KACNlD,SAAS,EACTmD,MAAO,mCAIrB,CAACJ,IAEIpB,EDxBmB6B,CAAe,qCAAD,OAAsC7B,EAAMzC,UAA5EgE,EAxBe,EAwBfA,KAAMlD,EAxBS,EAwBTA,QAxBS,EEHJ,WAA0B,IAAxByD,EAAuB,uDAAR,GAAQ,EAEhB3F,mBAAS2F,GAFO,mBAErCC,EAFqC,KAE7BC,EAF6B,KAItCC,EAAQ,WACVD,EAAWF,IAITI,EAAoB,SAAC,GAAgB,IAAd7E,EAAa,EAAbA,OAEzB2E,EAAU,2BACHD,GADE,kBAEH1E,EAAOM,KAAQN,EAAO8E,UAKhC,MAAO,CAAEJ,EAAQG,EAAmBD,GFWaG,CAAQ,CAAC7E,QAAS,KA1B5C,mBA0Bf8E,EA1Be,KA0BHH,EA1BG,KA0BgBD,EA1BhB,KA4Bf1E,EAAY8E,EAAZ9E,QAEF+E,EAAe,SAAAC,GACjB,OAAOA,EAAIC,OAAOpD,eAmBtB,OACI,yBAAK1C,UAAU,kBACX,yBAAKA,UAAU,yFACX,yBAAKA,UAAU,4BACX,wBAAIA,UAAU,kCAAd,kBACA,6BACA,0BAAM+F,SAtBD,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAWN,EAAa/E,GAC1B,iBAAiBsF,KAAKD,KAClB5C,EAAML,cAAcmD,SAASF,IAC7B3C,GAAS,SAAAc,GAAI,kCAASA,GAAT,IAAexD,QAASqF,OACrCX,KAEAhC,GAAS,SAAAc,GAAI,kCACNA,GADM,IAETxD,QAASqF,SAYqBlG,UAAU,qBACpC,2BACIqG,aAAa,MACbrG,UAAU,eACVuB,GAAG,UACHN,KAAK,UACLqF,SAAUd,EACVe,YAAY,cACZnF,KAAK,OACLqE,MAAO5E,MAInB,yBAAKb,UAAU,wDAEW,KAAlBsD,EAAMzC,UAAmBc,GAAW,kBAAC6E,EAAA,EAAD,CAAOxG,UAAU,QAAjB,mCAGpCsD,EAAML,cAAcmD,SAASR,EAAatC,EAAMzC,WAAac,IAAYkD,GAAQ,kBAACxC,EAAA,EAAD,CAASrC,UAAU,SAASH,MAAM,aAGlHyD,EAAML,cAAcmD,SAASR,EAAatC,EAAMzC,WAA+B,KAAlByC,EAAMzC,UAAmBgE,GAAQ,kBAAC2B,EAAA,EAAD,CAAO3G,MAAM,UAAb,WAAgCyD,EAAMzC,QAAtC,oBAG7E,KAAlByC,EAAMzC,SAAkBgE,GAAQ,kBAAC,EAAD,eAAU7E,UAAU,QAAW6E,EAA/B,CAAqClD,QAASA,SGrDvF8E,EA7BK,SAAC,GAAuB,IAArB5B,EAAoB,EAApBA,KAAMlD,EAAc,EAAdA,QAGzB,OACI,oCACI,yBAAK3B,UAAU,aACX,yBAAKA,UAAU,OAEP2B,EACI,yBAAK3B,UAAU,4DACX,kBAACqC,EAAA,EAAD,CAASxC,MAAM,aAGnBgF,EAAK9D,KAAI,SAAAF,GAAO,OACZ,yBAAKb,UAAU,4CAA4C6C,IAAKhC,EAAQU,IACpE,kBAAC,EAAD,eACIsB,IAAKhC,EAAQU,IACTV,EAFR,CAGIc,QAASA,a,yBC0DlC+E,EA3EI,WAAM,MAGKjH,mBAAS,CAC/B6E,SAAU,GACVqC,YAAa,EACbC,OAAQ,EACRC,QAAS,KAPQ,mBAGdvD,EAHc,KAGPC,EAHO,KAWrBC,qBAAU,WACNG,MAAM,gDACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAIR,GAAS,SAAAc,GAAI,kCAASA,GAAT,IAAeC,SAAUP,EAAME,gBAC1DM,OAAM,SAAAC,GAAG,OAAI,IAAIC,MAAM,2BAC7B,IAhBkB,MCDD,SAAEC,GAEtB,IAAMC,EAAYC,kBAAO,GAFM,EAGLnF,mBAAS,CAAEoF,KAAM,KAAMlD,SAAS,EAAMmD,MAAO,OAHxC,mBAGxBxB,EAHwB,KAGjBC,EAHiB,KAuD/B,OAlDAC,qBAAW,WACP,OAAO,WACHmB,EAAUI,SAAU,KAEzB,IAGHvB,qBAAW,WAEPD,EAAS,CAAEsB,KAAM,GAAIlD,SAAS,EAAMmD,MAAO,OAE3CnB,MAAOe,GACFd,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MAAM,SAAAU,GACiBA,EAAZL,QACA6C,SAAQ,SAAAjG,GACZ8C,MAAM9C,EAAQ6D,KACTd,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MAAM,SAAA/C,GAAY,IAAD,EACRC,EAAYF,EAAoBC,GAChCM,EAAQD,EAAgBL,GACxBkG,EAAa,CACXxF,GAAIV,EAAQU,GACZC,MAAK,OAAEX,QAAF,IAAEA,GAAF,UAAEA,EAASoE,eAAX,aAAE,EAAkBC,cACzBjE,KAAMJ,EAAQI,KACdH,UAAWA,EACXW,OAAQZ,EAAQY,OAChBC,OAAQb,EAAQa,OAChBP,MAAOA,GAEVwD,EAAUI,SACXxB,GAAS,SAAAc,GAAI,MAAK,CACd1C,SAAS,EACTmD,MAAO,KACPD,KAAK,GAAD,mBAAMR,EAAKQ,MAAX,CAAiBkC,iBAM5CxC,OAAO,WACJhB,EAAS,CACLsB,KAAM,KACNlD,SAAS,EACTmD,MAAO,mCAIrB,CAACJ,IAEIpB,EDnCmB0D,CAAS,4CAAD,OAA6C1D,EAAMsD,OAAnD,kBAAmEtD,EAAMuD,UAAnGhC,EAnBa,EAmBbA,KAAMlD,EAnBO,EAmBPA,QAERsF,GAAetF,GAAWkD,EAAKqC,MAAK,SAACC,EAAGC,GAC1C,OAAOD,EAAE5F,GAAK6F,EAAE7F,MAId8F,EAAkB,SAAEC,GACtB,IAAMC,EAAYjE,EAAMuD,QAAUS,EAAQE,SAC1CjE,EAAS,2BACFD,GADC,IAEJsD,OAAQW,EACRZ,YAAaW,EAAQE,aAI7B,OACI,yBAAKxH,UAAU,aACX,wBAAIA,UAAU,uCAAd,eACA,6BACA,kBAAC,EAAD,CAAa6E,KAAMoC,EAAatF,QAASA,IACzC,yBAAK3B,UAAU,2CACX,kBAAC,IAAD,CACIyH,cAAc,IACdC,UAAU,IACVC,WAAW,MACXC,UAAW,GACXC,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAcV,EACdW,mBAAmB,aACnBC,cAAe,uBACfC,kBAAmB,OACnBzH,gBAAiB,cACjB0H,oBAAqB,iBAI7B,yBAAKnI,UAAU,2CACX,kBAAC,IAAD,CACIyH,cAAc,IACdC,UAAU,IACVC,WAAW,MACXC,UAAW,GACXC,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAcV,EACdW,mBAAmB,aACnBI,sBAAsB,OACtB3H,gBAAgB,mBE/CrB4H,EAfG,WACd,OACI,kBAAC,IAAD,CAAQC,SAAU,mBACd,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAYzF,IACxC,kBAAC,IAAD,CAAOwF,KAAK,IAAIC,UAAY/B,KAEhC,kBAAC,IAAD,CAAUzG,GAAG,SCTdyI,EARI,WACf,OACI,oCACI,kBAAC,EAAD,Q,YCEZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0fe97fa5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {\r\n    Collapse, Nav,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavLink as BLink\r\n} from \"reactstrap\";\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nconst PokeNavbar = () => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <Navbar color=\"danger\" sticky=\"true\" expand=\"md\">\r\n            <Link className=\"navbar-brand d-flex\" to=\"/\">\r\n                <img className=\"brand flex-shrink-0\" src={`/pokedex-react/assets/images/pkdx.png`} alt=\"Pokedex\"/>\r\n            </Link>\r\n            <NavbarToggler onClick={toggle} className=\"navbar-dark\"/>\r\n            <Collapse isOpen={isOpen} navbar>\r\n                <Nav className=\"mr-auto\" navbar>\r\n                    <NavLink\r\n                        activeClassName=\"active\"\r\n                        to=\"/buscar\"\r\n                        className=\"nav-item nav-link\"\r\n                    >\r\n                        Search\r\n                    </NavLink>\r\n                </Nav>\r\n                <BLink\r\n                    href=\"https://github.com/m00nreal/pokedex-react\"\r\n                    target=\"_blank\"\r\n                    className=\"nav-item nav-link\"\r\n                >\r\n                    <img className=\"d-none d-md-block\" src={`/pokedex-react/assets/images/github.png`} alt=\"Github\"/>\r\n                    <span className=\"d-md-none\">GitHub</span>\r\n                </BLink>\r\n            </Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default PokeNavbar;\r\n","export const getPokemonAbilities = (pokemon) => pokemon.abilities.map( ({ ability }) => (ability.name));\r\n\r\nexport const getPokemonTypes = (pokemon) => pokemon.types.map( ({ type }) => (type.name));\r\n\r\nexport const capitalize = string => {\r\n    return string !== '' ? string.split(' ').map(s => s[0].toUpperCase().concat(s.slice(1))).join(' ') : '';\r\n}\r\n\r\nexport const getTypeColor = type => {\r\n    switch (type.toLowerCase()) {\r\n        case 'fire':        return '#f5222d'\r\n        case 'bug':         return '#7cb305'\r\n        case 'dark':        return '#434343'\r\n        case 'ice':         return '#69c0ff'\r\n        case 'electric':    return '#faad14'\r\n        case 'grass':       return '#95de64'\r\n        case 'normal':      return '#d9d9d9'\r\n        case 'rock':        return '#873800'\r\n        case 'fairy':       return '#ffadd2'\r\n        case 'flying':      return '#d6e4ff'\r\n        case 'ground':      return '#613400'\r\n        case 'poison':      return '#3f6600'\r\n        case 'steel':       return '#d9d9d9'\r\n        case 'dragon':      return '#722ed1'\r\n        case 'fighting':    return '#ad2102'\r\n        case 'ghost':       return '#391085'\r\n        case 'psychic':     return '#c41d7f'\r\n        case 'water':       return '#597ef7'\r\n        default: return '#f4f4f4';\r\n    }\r\n}","import React from 'react';\r\nimport {Card, CardBody, CardImg, CardHeader, Badge, Spinner} from \"reactstrap\";\r\nimport {capitalize, getTypeColor} from \"../../helpers/utils\";\r\n\r\nconst PokeCard = ({\r\n    id,\r\n    image,\r\n    name,\r\n    abilities,\r\n    height,\r\n    weight,\r\n    types,\r\n    loading\r\n    }) => {\r\n\r\n    const getImage = () => {\r\n        return image ? image : `${process.env.PUBLIC_URL}/assets/images/noimg.png`\r\n    }\r\n    return (\r\n        loading ? <span>cargando</span> :\r\n        <Card className=\"m-auto animate__animated animate__fadeIn\">\r\n            <CardHeader className=\"text-center font-weight-bolder\">{ capitalize(name) } <span className=\"card-header__id small d-block  \"># { id }</span></CardHeader>\r\n            <CardBody className=\"d-flex flex-column\">\r\n                { loading ? <Spinner color=\"primary\"/> : <CardImg className=\"align-self-center\" width=\"50%\" src={getImage()} alt={name}/>}\r\n                <div>\r\n                    <li className=\"list-item\">Height: <span>{ height/10 } m</span></li>\r\n                    <li className=\"list-item\">Weight: {weight/10 } kg</li>\r\n                    <div className=\"abilities\">\r\n                        <div className=\"abilities-header\">\r\n                            Abilities\r\n                        </div>\r\n                        <div className=\"abilities-content\">\r\n                            {\r\n                                abilities.join(', ')\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <li className=\"list-item\">\r\n                        {\r\n                            types.map(t => {\r\n                                const color = getTypeColor(t);\r\n                                return <Badge key={t} className=\"mr-1 p-1\" style={{background: color}}>{ t }</Badge>\r\n                            })\r\n                        }\r\n                    </li>\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PokeCard;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useForm} from \"../../hooks/useForm\";\r\nimport PokeCard from \"../pokedex/PokedexCard\";\r\nimport {useFetchSingle} from \"../../hooks/useFetchSingle\";\r\nimport {Alert, Spinner} from \"reactstrap\";\r\n\r\nconst SearchScreen = () => {\r\n\r\n    // App state\r\n    const [state, setState] = useState({\r\n        pokemonsNames: JSON.parse(localStorage.getItem('pokenames')) || [],\r\n        pokemon: ''\r\n    });\r\n\r\n    // Get all pokemon names and api link at the begin of execution\r\n    useEffect(() => {\r\n        if(!localStorage.getItem('pokenames')){\r\n            console.log('me ejecute')\r\n            fetch(`https://pokeapi.co/api/v2/pokemon?limit=1000`)\r\n                .then(resp => resp.json())\r\n                .then(pokes => {\r\n                    const names = pokes.results.map(p => p.name);\r\n                    localStorage.setItem('pokenames', JSON.stringify(names))\r\n                    setState(prev => ({pokemonsNames: names, pokemons: pokes.results}))\r\n                })\r\n                .catch(err => new Error('error getting info'))\r\n        }\r\n    }, []);\r\n\r\n    // Search handling\r\n    const { data, loading } = useFetchSingle(`https://pokeapi.co/api/v2/pokemon/${state.pokemon}`);\r\n\r\n    const [ formValues, handleInputChange, reset ] = useForm({pokemon: ''});\r\n\r\n    const { pokemon } = formValues;\r\n\r\n    const validateName = str => {\r\n        return str.trim().toLowerCase();\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        const sanitize = validateName(pokemon)\r\n        if( /([A-Za-z- .])+/.test(sanitize) ) {\r\n            if( state.pokemonsNames.includes(sanitize)){\r\n                setState(prev => ({...prev, pokemon: sanitize}))\r\n                reset();\r\n            } else {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    pokemon: sanitize\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <div className=\"row d-flex align-content-center justify-content-center align-items-center flex-column\">\r\n                <div className=\"col-6 d-flex flex-column\">\r\n                    <h1 className=\"title text-primary text-center\" >Search by name</h1>\r\n                    <hr/>\r\n                    <form onSubmit={handleSearch} className=\"align-self-center\">\r\n                        <input\r\n                            autoComplete=\"off\"\r\n                            className=\"form-control\"\r\n                            id=\"pokemon\"\r\n                            name=\"pokemon\"\r\n                            onChange={handleInputChange}\r\n                            placeholder=\"Totodile...\"\r\n                            type=\"text\"\r\n                            value={pokemon}\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <div className=\"m-4 d-flex justify-content-center align-items-center\">\r\n                    {\r\n                        state.pokemon === '' && !loading && <Alert className=\"mx-4\">Type a name to search a pokemon</Alert>\r\n                    }\r\n                    {\r\n                        state.pokemonsNames.includes(validateName(state.pokemon)) && loading && !data && <Spinner className=\"m-auto\" color=\"primary\"/>\r\n                    }\r\n                    {\r\n                        !state.pokemonsNames.includes(validateName(state.pokemon)) && state.pokemon !== '' && !data && <Alert color=\"danger\">Pokemon { state.pokemon } does not exists</Alert>\r\n                    }\r\n                    {\r\n                        state.pokemon !== '' && data && <PokeCard className=\"mb-4\" {...data} loading={loading}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchScreen;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport {getPokemonAbilities, getPokemonTypes} from \"../helpers/utils\";\r\n\r\n\r\nexport const useFetchSingle = (url ) => {\r\n\r\n    const isMounted = useRef(true);\r\n    const [state, setState] = useState({ data: null, loading: true, error: null });\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            isMounted.current = false;\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect( () => {\r\n\r\n        setState({ data: null, loading: true, error: null });\r\n\r\n        fetch( url )\r\n            .then( resp => resp.json())\r\n            .then( data => {\r\n                const abilities = getPokemonAbilities(data);\r\n                const types = getPokemonTypes(data);\r\n                const newPok = {\r\n                    id: data.id,\r\n                    image: data?.sprites?.front_default,\r\n                    name: data.name,\r\n                    abilities: abilities,\r\n                    height: data.height,\r\n                    weight: data.weight,\r\n                    types: types\r\n                }\r\n\r\n                if ( isMounted.current ) {\r\n                    setState({\r\n                        loading: false,\r\n                        error: null,\r\n                        data: newPok\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch( () => {\r\n                setState({\r\n                    data: null,\r\n                    loading: false,\r\n                    error: 'No se pudo cargar la info'\r\n                })\r\n            })\r\n\r\n    },[url])\r\n\r\n    return state;\r\n}","import { useState } from 'react';\r\n\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","import React from 'react';\r\nimport PokeCard from \"./PokedexCard\";\r\nimport {Spinner} from \"reactstrap\";\r\n\r\nconst PokedexList = ({ data, loading }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {\r\n                        loading ?\r\n                            <div className=\"col m-4 d-flex justify-content-center align-items-center\">\r\n                                <Spinner color=\"primary\"/>\r\n                            </div>\r\n                            :\r\n                            data.map(pokemon => (\r\n                                <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-4\" key={pokemon.id}>\r\n                                    <PokeCard\r\n                                        key={pokemon.id}\r\n                                        {...pokemon}\r\n                                        loading={loading}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokedexList;\r\n","import React, {useEffect, useState} from 'react';\r\nimport PokedexList from \"../pokedex/PokedexList\";\r\nimport {useFetch} from \"../../hooks/useFetch\";\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst HomeScreen = () => {\r\n\r\n    // Initial state\r\n    const [state, setState] = useState({\r\n        pokemons: [],\r\n        currentPage: 0,\r\n        offset: 0,\r\n        perPage: 24\r\n    });\r\n\r\n    // Get all pokemon names and api link at the begin of execution\r\n    useEffect(() => {\r\n        fetch(`https://pokeapi.co/api/v2/pokemon?limit=1000`)\r\n            .then(resp => resp.json())\r\n            .then(pokes => setState(prev => ({...prev, pokemons: pokes.results})))\r\n            .catch(err => new Error('error getting info'))\r\n    }, []);\r\n\r\n    // Get pokemons\r\n    const { data, loading } = useFetch(`https://pokeapi.co/api/v2/pokemon?offset=${state.offset}&limit=${state.perPage}`);\r\n\r\n    const orderedData = !loading && data.sort((a, b) => {\r\n        return a.id - b.id;\r\n    })\r\n\r\n    // Pagination\r\n    const handlePageClick = ( newPage ) => {\r\n        const newOffset = state.perPage * newPage.selected;\r\n        setState({\r\n            ...state,\r\n            offset: newOffset,\r\n            currentPage: newPage.selected\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"title text-center text-primary mt-4\">All PoKeMoN</h1>\r\n            <hr/>\r\n            <PokedexList data={orderedData} loading={loading}/>\r\n            <div className=\"d-none d-md-flex justify-content-center\">\r\n                <ReactPaginate\r\n                    previousLabel=\"<\"\r\n                    nextLabel=\">\"\r\n                    breakLabel=\"...\"\r\n                    pageCount={41}\r\n                    marginPagesDisplayed={9}\r\n                    pageRangeDisplayed={9}\r\n                    onPageChange={handlePageClick}\r\n                    containerClassName=\"pagination\"\r\n                    pageClassName={'pagination-list-item'}\r\n                    pageLinkClassName={'link'}\r\n                    activeClassName={'active-link'}\r\n                    activeLinkClassName={'active-link'}\r\n                />\r\n            </div>\r\n            {/*hidden on larger screens. on smaller devices it has a lower pagination range*/}\r\n            <div className=\"d-md-none d-flex justify-content-center\">\r\n                <ReactPaginate\r\n                    previousLabel=\"<\"\r\n                    nextLabel=\">\"\r\n                    breakLabel=\"...\"\r\n                    pageCount={41}\r\n                    marginPagesDisplayed={3}\r\n                    pageRangeDisplayed={2}\r\n                    onPageChange={handlePageClick}\r\n                    containerClassName=\"pagination\"\r\n                    subContainerClassName=\"dark\"\r\n                    activeClassName=\"active-page\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport {getPokemonAbilities, getPokemonTypes} from \"../helpers/utils\";\r\n\r\n\r\nexport const useFetch = ( url ) => {\r\n\r\n    const isMounted = useRef(true);\r\n    const [state, setState] = useState({ data: null, loading: true, error: null });\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            isMounted.current = false;\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect( () => {\r\n\r\n        setState({ data: [], loading: true, error: null });\r\n\r\n        fetch( url )\r\n            .then( resp => resp.json() )\r\n            .then( pokemons => {\r\n                const { results } = pokemons;\r\n                results.forEach(pokemon => {\r\n                    fetch(pokemon.url)\r\n                        .then( resp => resp.json())\r\n                        .then( pokemon => {\r\n                            const abilities = getPokemonAbilities(pokemon);\r\n                            const types = getPokemonTypes(pokemon);\r\n                            const newPokemon = {\r\n                                    id: pokemon.id,\r\n                                    image: pokemon?.sprites?.front_default,\r\n                                    name: pokemon.name,\r\n                                    abilities: abilities,\r\n                                    height: pokemon.height,\r\n                                    weight: pokemon.weight,\r\n                                    types: types\r\n                            }\r\n                            if ( isMounted.current ) {\r\n                                setState(prev => ({\r\n                                    loading: false,\r\n                                    error: null,\r\n                                    data: [...prev.data, newPokemon]\r\n                                }));\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n            .catch( () => {\r\n                setState({\r\n                    data: null,\r\n                    loading: false,\r\n                    error: 'No se pudo cargar la info'\r\n                })\r\n            })\r\n\r\n    },[url])\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport PokeNavbar from \"../components/ui/PokeNavbar\";\r\nimport SearchScreen from \"../components/screens/SearchScreen\";\r\nimport HomeScreen from \"../components/screens/HomeScreen\";\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Router basename={'/pokedex-react/'}>\r\n            <div>\r\n                <PokeNavbar/>\r\n                <Switch>\r\n                    <Route exact path=\"/buscar\" component={ SearchScreen }/>\r\n                    <Route path=\"/\" component={ HomeScreen }/>\r\n                </Switch>\r\n                <Redirect to=\"/\"/>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport AppRouter from \"./routers/AppRouter\";\r\n\r\nconst PokedexApp = () => {\r\n    return (\r\n        <>\r\n            <AppRouter/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokedexApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PokedexApp from \"./PokedexApp\";\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <PokedexApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}